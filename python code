import tkinter as tk
import math
import threading

class Calculator:
    def __init__(self, master):
        self.master = master
        master.title("Scientific Calculator")
        
        # Configure background color of the root window
        master.config(bg="black")
        
        # Create and configure the display entry widget
        self.display = tk.Entry(master, width=30, borderwidth=5, bg="black", fg="white")
        self.display.grid(row=0, column=0, columnspan=5, padx=10, pady=10)
        
        # Define buttons and their layout (text, row, column)
        self.buttons = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3), ('C', 1, 4),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3), ('(', 2, 4),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3), (')', 3, 4),
            ('0', 4, 0), ('.', 4, 1), ('=', 4, 2), ('+', 4, 3), ('π', 4, 4),
            ('sin', 5, 0), ('cos', 5, 1), ('tan', 5, 2), ('^', 5, 3), ('√', 5, 4)
        ]
        
        # Create buttons and assign commands
        for (text, row, col) in self.buttons:
            tk.Button(master, text=text, command=lambda t=text: self.on_button_click(t), borderwidth=5, bg="black", fg="white").grid(row=row, column=col, sticky="we")
        
        # Create the "Clear all" button
        tk.Button(master, text="Clear all", command=lambda t="Clear all": self.on_button_click(t), borderwidth=5, bg="black", fg="white").grid(row=6, column=0, sticky="we", columnspan=5)

    def on_button_click(self, text):
        # Function to handle button clicks
        
        if text == '=':
            # Evaluate the expression when '=' is clicked
            try:
                expression = self.display.get()
                result = eval(expression)
                self.display.delete(0, tk.END)
                self.display.insert(tk.END, str(result))
            except:
                self.display.delete(0, tk.END)
                self.display.insert(tk.END, "Error")
        
        elif text == 'C':
            # Clear the last entered value when 'C' is clicked
            e=self.display.get()
            e = e[0:len(e) - 1]  # deleting the last entered value
            self.display.delete(0, "end")
            self.display.insert(0, e)
        
        elif text == 'Clear all':
            # Clear the display when 'Clear all' is clicked
            self.display.delete(0, tk.END)
        
        elif text == 'π':
            # Insert pi value when 'π' is clicked
            self.display.insert(tk.END, str(math.pi))
        
        elif text == '√':
            # Calculate square root when '√' is clicked
            try:
                expression = self.display.get()
                result = math.sqrt(float(expression))
                self.display.delete(0, tk.END)
                self.display.insert(tk.END, str(result))
            except:
                self.display.delete(0, tk.END)
                self.display.insert(tk.END, "Error")
        
        elif text in ['sin', 'cos', 'tan']:
            # Calculate trigonometric functions when 'sin', 'cos', or 'tan' is clicked
            try:
                expression = f'math.{text}(math.radians({self.display.get()}))'
                result = eval(expression)
                self.display.delete(0, tk.END)
                self.display.insert(tk.END, str(result))
            except:
                self.display.delete(0, tk.END)
                self.display.insert(tk.END, "Error")
        
        elif text == '^':
            # Calculate power when '^' is clicked
            try:
                expression = self.display.get()
                result = int(expression[0]) ** int(expression[1])
                self.display.delete(0, tk.END)
                self.display.insert(tk.END, str(result))
            except:
                self.display.delete(0, tk.END)
                self.display.insert(tk.END, "Error")
        
        else:
            # Insert the clicked button's text into the display
            self.display.insert(tk.END, text)

def run_calculator():
    root = tk.Tk()
    calculator = Calculator(root) 
    root.mainloop()
    
# Create a thread for running the calculator
calculator_thread = threading.Thread(target=run_calculator)
calculator_thread.start()
#calculator_thread1 = threading.Thread(target=run_calculator)
#calculator_thread1.start()

